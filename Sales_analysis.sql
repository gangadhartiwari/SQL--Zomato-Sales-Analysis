
-- CHECK and ANAYZE the data carefully for further analysis 


SELECT * FROM customers;
SELECT * FROM food;
SELECT * FROM restaurants;
SELECT * FROM menu;
SELECT * FROM orders;


-- We will now write important queries to analyze restaurant sales, customer behavior, and food trends.

-- 1️⃣  Basic Data Retrieval & Filtering :-


-- Retrieve all restaurants:

SELECT * FROM restaurants;

-- List all unique cuisines available:

SELECT DISTINCT cuisine FROM restaurants;

-- Find all vegetarian food items:

SELECT item FROM food WHERE veg_or_non_veg = 'Veg';

-- Find restaurants with a rating above 4.5:

SELECT rest_name, rating FROM restaurants WHERE rating > 4.5;

-- Find all customers who have placed at least one order:

SELECT c.cust_id, c.cust_name FROM customers c
JOIN orders o ON c.cust_id = o.cust_id;

-- Retrieve all menu items sorted by price in descending order:

SELECT * FROM menu ORDER BY price DESC;

-- Find all customers from a specific Age Criteria:

SELECT * FROM customers 
WHERE age > 30;

--  Find all customers who are students:

SELECT * FROM customers WHERE Occupation = 'Student';


-- 2️⃣ Join, Aggregation & Grouping : -


-- Count total orders placed:

SELECT COUNT(*) AS total_orders FROM orders;

-- List all menu items with restaurant names:

SELECT m.food_id, m.cuisine, m.price, r.rest_name 
FROM menu m
INNER JOIN restaurants r ON m.rest_id = r.rest_id;

-- Get all orders with customer and restaurant details:

SELECT o.order_id, c.cust_name, r.rest_name, o.order_date 
FROM orders o
JOIN customers c ON o.cust_id = c.cust_id
JOIN restaurants r ON o.rest_id = r.rest_id;

-- Count total orders per restaurant:

SELECT o.rest_id, r.rest_name, COUNT(order_id) AS total_orders 
FROM orders o 
JOIN restaurants r ON  o.rest_id = r.rest_id
GROUP BY o.rest_id, r.rest_name
ORDER BY total_orders DESC;

-- Get details of food items ordered along with restaurant and customer details:

SELECT o.order_id, f.item, f.veg_or_non_veg, c.cust_name, r.rest_name, o.order_date
FROM orders o
JOIN customers c ON o.cust_id = c.cust_id
JOIN restaurants r ON o.rest_id = r.rest_id
JOIN menu m ON o.rest_id = m.rest_id 
JOIN food f ON m.food_id = f.food_id;

--  Find customers who have placed orders along with those who haven't:

SELECT c.cust_name, o.order_id, o.order_date
FROM customers c
LEFT JOIN orders o ON c.cust_id = o.cust_id;

-- Find the highest sales amount recorded in a single order: 

SELECT MAX(sales_amount) AS max_sales 
FROM orders;

-- Calculate total revenue generated by each restaurant:

SELECT rest_id, SUM(sales_amount) AS total_revenue 
FROM orders 
GROUP BY rest_id;


-- 3️⃣ Subqueries : - 


--  Find restaurants that have more than 10 menu items:

SELECT rest_id FROM menu GROUP BY rest_id HAVING COUNT(food_id) > 10;

-- Retrieve the most expensive menu item in each cuisine:

SELECT * FROM menu 
WHERE price = (SELECT MAX(price) FROM menu );

--  Retrieve the name of the customer who placed the highest number of orders:

SELECT cust_name FROM customers
WHERE cust_id = (
    SELECT cust_id FROM orders GROUP BY cust_id ORDER BY COUNT(order_id) DESC LIMIT 1
);

-- Find restaurants that have an average menu price higher than the overall average menu price:

SELECT rest_id FROM menu
GROUP BY rest_id 
HAVING AVG(price) > (
    SELECT AVG(price) FROM menu
);




-- 4️⃣ CTEs  : - 


-- Find the top 5 highest revenue-generating restaurants:

WITH Revenue AS (
    SELECT o.rest_id, SUM(o.sales_amount) AS total_revenue 
    FROM orders o
    GROUP BY o.rest_id
)
SELECT r.rest_name, total_revenue FROM Revenue
JOIN restaurants r ON Revenue.rest_id = r.rest_id
ORDER BY total_revenue DESC LIMIT 5;


--  Find the number of orders each customer has placed:

WITH CustomerOrders AS (
    SELECT cust_id, COUNT(order_id) AS total_orders 
    FROM orders 
    GROUP BY cust_id
)
SELECT c.cust_name, co.total_orders FROM CustomerOrders co
JOIN customers c ON co.cust_id = c.cust_id;


-- Identify the highest-spending customer:

WITH CustomerSpending AS (
    SELECT cust_id, SUM(sales_amount) AS total_spent 
    FROM orders 
    GROUP BY cust_id
)
SELECT c.cust_name, cs.total_spent FROM CustomerSpending cs
JOIN customers c ON cs.cust_id = c.cust_id
ORDER BY total_spent DESC LIMIT 1;



--  5️⃣ Window Functions : - 


--  Rank restaurants by total orders:

SELECT rest_id, COUNT(order_id) AS total_orders,
       RANK() OVER(ORDER BY COUNT(order_id) DESC) AS rank_order
FROM orders
GROUP BY rest_id;

-- Show cumulative sales per restaurant over time:

SELECT rest_id, order_date, SUM(sales_amount) OVER (PARTITION BY rest_id ORDER BY order_date) AS cumulative_sales
FROM orders;

-- Calculate running total of orders per customer:

SELECT cust_id, order_id, SUM(sales_amount) OVER (PARTITION BY cust_id ORDER BY order_date) AS running_total
FROM orders;

--  Assign row numbers to orders per customer:

SELECT cust_id, order_id, ROW_NUMBER() OVER (PARTITION BY cust_id ORDER BY order_date) AS row_num
FROM orders;

-- Calculate average order value per restaurant with a moving average
SELECT rest_id, order_id, 
AVG(sales_amount) OVER (PARTITION BY rest_id ORDER BY order_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg
FROM orders;



--  6️⃣ Advanced Analysis : - 


-- Identify the most frequently ordered food items:

SELECT f.item, COUNT(o.order_id) AS order_count 
FROM orders o
JOIN menu m ON o.food_id = m.food_id
JOIN food f ON m.food_id = f.food_id
GROUP BY f.item
ORDER BY order_count DESC LIMIT 5;


--  Find the restaurant with the highest total revenue:

SELECT r.rest_name, SUM(o.sales_amount) AS total_revenue FROM orders o
JOIN restaurants r ON o.rest_id = r.rest_id
GROUP BY r.rest_name ORDER BY total_revenue DESC LIMIT 1;



